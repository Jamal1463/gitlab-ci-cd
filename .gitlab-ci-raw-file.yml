workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

default:
  before_script: # defining script at the global level
  #  - npm ci
  #  - apk add curl

stages:
  - build
  - compile
  - test
  - install-dependencies
  - s3_upload
  - deploy_review
  - deploy_stg
  - deploy_prod

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths:
      - build/

upload_artifacts:
  image: alpine
  stage: compile
  script:
    - test -f build/index.html

download_dependencies:
  image: node:22-alpine
  stage: install-dependencies
  script:
    - npm install

run_unit_tests:
  image: node:22-alpine
  stage: test
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

aws_s3:
  stage: s3_upload
  image: 
    name: amazon/aws-cli:2.27.45
    entrypoint: ['']
  script:
    - aws --version
    - aws s3 ls
    - echo "<h1>This is coming from GitLab CI/CD Course</h1>" > index.html
    - aws s3 cp index.html s3://sa-bucket-virginia123/index.html
    - aws s3 sync ./build/ s3://sa-bucket-virginia123

netlify_deploy_review:
  image: node:22-alpine
  stage: deploy_review
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  environment:
    name: preview/$CI_COMMIT_REF_SLUG
    url: $REVIEW_URL
  before_script:
    - npm install -g netlify-cli@20.1.1
    - apk add curl jq
  #  - mkdir build
  #  - echo "Test" > build/index.html
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - echo "Deploying to site auth token $NETLIFY_AUTH_TOKEN"
    - netlify deploy --dir build --json | tee deploy-result.json
    - REVIEW_URL=$(jq -r '.deploy_url' deploy-result.json)
    - echo $REVIEW_URL
    - curl $REVIEW_URL | grep 'GitLab CI/CD'
    - echo "REVIEW_URL=$REVIEW_URL" > deploy.env
    - cat deploy.env
  artifacts:
    reports:
      dotenv: deploy.env

docker_build_netlify:
  stage: .pre
  image: docker:28
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  services:
    - docker:28-dind #(dind = docker in docker deamon)
  script:
    - docker --version
    - docker version
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  #  - docker build -t netlify-img -f ci/Dockerfile .
    - docker build -t $CI_REGISTRY_IMAGE/netlify-img -f ci/Dockerfile .
    - docker tag $CI_REGISTRY_IMAGE/netlify-img $CI_REGISTRY_IMAGE/netlify:20.1.1
    - docker image ls 
    - docker push $CI_REGISTRY_IMAGE/netlify:20.1.1

build_docker_image:
  image: 
    name: amazon/aws-cli:2.23.0
    entrypoint: [""]
  stage: package
  services:
    - docker:27-dind
  variables: 
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - amazon-linux-extras install docker
  script:
    - aws --version
    - docker version
    - docker build -t $DOCKER_REGISTRY/learngitlabapp:$VITE_APP_VERSION -t $DOCKER_REGISTRY/learngitlabapp .
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker push --all-tags $DOCKER_REGISTRY/learngitlabapp

ssh_deploy:
  stage: deploy-ssh
  image: alpine
  before_script:
     # Check if port 22 is open on the server
    - nc -zv $REMOTE_DEPLOY_HOST 22
    # Grant read-only permission to the private key
    - chmod 400 $SSH_PRIVATE_KEY
    # Install the OpenSSH client, rsync, zip
    - apk add openssh-client rsync zip
    # Start the SSH agent
    - eval $(ssh-agent)
    # Add the SSH key to the agent
    - ssh-add $SSH_PRIVATE_KEY
    # Create the SSH directory and assign the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Create the known_hosts files and assign the right permissions
    - cp $SSH_KNOWN_HOSTS ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Create a zip archive of the build directory
    - zip -r build.zip build/
    # Copy the build artifact (zip) and the deploy script to the remote location
    - scp build.zip ci/deploy.sh $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST:~/deploy
    # Open SSH connection and run the deploy script
    - ssh $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST "cd ~/deploy; chmod +x deploy.sh; ./deploy.sh"

ecs_deploy:
  stage: deploy-ecs
  image: 
    name: amazon/aws-cli:2.23.0
    entrypoint: [""]
  script:
    - aws --version
    - aws ecs register-task-definition --cli-input-json file://aws/td-prod.json
    - aws ecs update-service --cluster LearnGitLabApp-Cluster-Prod --service LearnJenkinsApp-Service-Prod --task-definition LearnGitLabApp-TD-Prod
    - aws ecs wait services-stable --cluster LearnGitLabApp-Cluster-Prod --services LearnJenkinsApp-Service-Prod

netlify_deploy_stg:
  image: node:22-alpine
  stage: deploy_stg
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: staging
    url: 'https://staging--devops-gitlab.netlify.app/' 
  before_script:
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - echo "Deploying to site auth token $NETLIFY_AUTH_TOKEN"
    - netlify deploy --alias staging --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'

netlify_deploy_prod:
  image: node:22-alpine
  stage: deploy_prod
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  environment:
    name: production
    url: 'https://devops-gitlab.netlify.app/' 
  before_script:
    - npm install -g netlify-cli@20.1.1
    - apk add curl
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - echo "Deploying to site auth token $NETLIFY_AUTH_TOKEN"
    - netlify deploy --prod --dir build
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'