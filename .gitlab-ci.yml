stages:
  - build
  - package
  - deploy-ssh
  - deploy-ecs

variables:
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths: 
      - build/

build_docker_image:
  image: 
    name: amazon/aws-cli:2.23.0
    entrypoint: [""]
  stage: package
  services:
    - docker:27-dind
  variables: 
    DOCKER_HOST: tcp://docker:2375/
  before_script:
    - amazon-linux-extras install docker
  script:
    - aws --version
    - docker version
    - docker build -t $DOCKER_REGISTRY/learngitlabapp:$VITE_APP_VERSION -t $DOCKER_REGISTRY/learngitlabapp .
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker push --all-tags $DOCKER_REGISTRY/learngitlabapp

ssh_deploy:
  stage: deploy-ssh
  image: alpine
  before_script:
     # Check if port 22 is open on the server
    - nc -zv $REMOTE_DEPLOY_HOST 22
    # Grant read-only permission to the private key
    - chmod 400 $SSH_PRIVATE_KEY
    # Install the OpenSSH client, rsync, zip
    - apk add openssh-client rsync zip
    # Start the SSH agent
    - eval $(ssh-agent)
    # Add the SSH key to the agent
    - ssh-add $SSH_PRIVATE_KEY
    # Create the SSH directory and assign the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Create the known_hosts files and assign the right permissions
    - cp $SSH_KNOWN_HOSTS ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Create a zip archive of the build directory
    - zip -r build.zip build/
    # Copy the build artifact (zip) and the deploy script to the remote location
    - scp build.zip ci/deploy.sh $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST:~/deploy
    # Open SSH connection and run the deploy script
    - ssh $REMOTE_DEPLOY_USER@$REMOTE_DEPLOY_HOST "cd ~/deploy; chmod +x deploy.sh; ./deploy.sh"

ecs_deploy:
  stage: deploy-ecs
  image: 
    name: amazon/aws-cli:2.23.0
    entrypoint: [""]
  script:
    - aws --version
    - aws ecs register-task-definition --cli-input-json file://aws/td-prod.json
    - aws ecs update-service --cluster LearnGitLabApp-Cluster-Prod --service LearnJenkinsApp-Service-Prod --task-definition LearnGitLabApp-TD-Prod
    - aws ecs wait services-stable --cluster LearnGitLabApp-Cluster-Prod --services LearnJenkinsApp-Service-Prod